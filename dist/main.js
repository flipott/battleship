/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_player_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/player.js */ \"./src/modules/player.js\");\n/* harmony import */ var _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/displayBoard.js */ \"./src/modules/displayBoard.js\");\n// import Ship from './ship.js';\n// import Gameboard from './gameboard.js';\n\n\n\nconst startButton = document.getElementById('new-game');\nconst htmlShips = document.querySelector('.player .ships').children;\nconst directionChange = document.getElementById('direction-btn');\nconst directionSpan = document.getElementById('direction');\nconst directionDiv = document.querySelector('.direction-change');\nconst randomBtn = document.getElementById('random-board');\n\nlet winner = null;\nlet cpu = (0,_modules_player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('CPU', 'cpu');\nlet player = (0,_modules_player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('Player', 'human');\ncpu.board.generateFleet();\n\n_modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayBoard(player.board.board, player.type, false);\n_modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayBoard(cpu.board.board, cpu.type, false);\n\nlet spaces = document.getElementsByClassName('space');\n\nlet htmlSelection = null;\nlet direction = 'vertical';\n\n// Change direction of ship placement\ndirectionChange.addEventListener('click', () => {\n  if (direction === 'vertical') {\n    direction = 'horizontal';\n    directionSpan.innerHTML = 'Horizontal';\n  } else {\n    direction = 'vertical';\n    directionSpan.innerHTML = 'Vertical';\n  }\n});\n\n// Allow player to manually place ships\nfunction manualPlacement(status = false) {\n  if (player.board.ships.length === 5) {\n    startButton.disabled = false;\n    document.querySelector(\"#manual-message\").style.color = \"rgb(152, 152, 152)\";\n    document.querySelector(\"#direction-line\").style.color = \"rgb(152, 152, 152)\";\n    document.querySelector(\"#direction-btn\").disabled = \"disabled\";\n    htmlSelection = null;\n    return;\n  }\n\n  let randomFlag = false;\n\n  if (!randomFlag) {\n    randomBtn.addEventListener('click', () => {\n      randomFlag = true;\n      document.querySelector(\"#manual-message\").style.color = \"rgb(152, 152, 152)\";\n      document.querySelector(\"#direction-line\").style.color = \"rgb(152, 152, 152)\";\n      document.querySelector(\"#direction-btn\").disabled = \"disabled\";\n      player.board.generateFleet();\n      _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayBoard(player.board.board, player.type, false);\n      _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].shipHighlight('all', 'select');\n      manualPlacement();\n    });\n  }\n\n  // Adds listeners to ship names\n  function shipSelectionListener(ship) {\n    if (randomFlag === false && !ship.classList.contains('placed')) {\n      htmlSelection = ship.innerText;\n      htmlSelection =\n        htmlSelection.charAt(0).toLowerCase() + htmlSelection.slice(1);\n      _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].shipHighlight(htmlSelection, 'select');\n      manualPlacement(true);\n    }\n  }\n\n  // Adds listeners to clicked spaces\n  function spaceSelectionListener(space) {\n    if (randomFlag === false) {\n      const coords = [\n        parseInt(space.getAttribute('x'), 10),\n        parseInt(space.getAttribute('y'), 10),\n      ];\n      if (htmlSelection) {\n        const playerSelection = player.board.manuallyPlaceShip(\n          htmlSelection,\n          coords,\n          direction\n        );\n        if (playerSelection === true) {\n          _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].shipHighlight(htmlSelection, 'placed');\n          _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayBoard(player.board.board, player.type, false);\n          spaces = document.getElementsByClassName('space');\n          htmlSelection = null;\n          manualPlacement();\n        }\n      }\n    }\n  }\n\n  // Adds listeners to hovered spaces\n  function spaceHoverListener(space) {\n    if (htmlSelection) {\n      const hoverCoords = [\n        parseInt(space.getAttribute('x'), 10),\n        parseInt(space.getAttribute('y'), 10),\n      ];\n      const tempHover = player.board.manuallyPlaceShip(\n        htmlSelection,\n        hoverCoords,\n        direction,\n        true\n      );\n      if (tempHover[0]) {\n        _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showHover(tempHover[0], tempHover[1]);\n      } else {\n        _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showHover(tempHover[0], tempHover[1]);\n      }\n    }\n  }\n\n  if (status === false) {\n    for (let i = 0; i < htmlShips.length; i += 1) {\n      htmlShips[i].addEventListener('click', (e) =>\n        shipSelectionListener(e.target)\n      );\n    }\n\n    for (let i = 0; i < 100; i += 1) {\n      spaces[i].style.cursor = \"pointer\";\n      spaces[i].addEventListener('click', (e) => {\n        spaceSelectionListener(e.target);\n      });\n\n      spaces[i].addEventListener('mouseover', (e) => {\n        spaceHoverListener(e.target);\n      });\n\n      spaces[i].addEventListener('mouseout', _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].hideHover);\n    }\n  }\n}\n\nfunction init() {\n  cpu = (0,_modules_player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('CPU', 'cpu');\n  cpu.board.generateFleet();\n  player = (0,_modules_player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('Player', 'human');\n\n  _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].newGameMessage();\n  _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clearResults();\n  _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayBoard(player.board.board, player.type, false);\n  _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayBoard(cpu.board.board, cpu.type, false);\n  directionDiv.style.visibility = 'visible';\n  directionDiv.style.display = 'flex';\n\n  spaces = document.getElementsByClassName('space');\n  document.querySelector(\"#manual-message\").style.color = \"white\";\n  document.querySelector(\"#direction-line\").style.color = \"white\";\n  document.querySelector(\"#direction-btn\").disabled = false;\n  document.querySelector(\".results-container\").style.display = \"none\";\n\n\n  manualPlacement();\n  startButton.innerText = 'Begin!';\n  startButton.disabled = true;\n  winner = null;\n}\n\n// Adds event listeners to spaces on current board\nfunction domAttack() {\n  for (let i = 100; i < 200; i += 1) {\n    spaces[i].addEventListener('click', (e) => {\n      playerMove(\n        parseInt(e.target.getAttribute('x'), 10),\n        parseInt(e.target.getAttribute('y'), 10)\n      );\n    });\n  }\n}\n\n// Checks for a winner\nfunction checkWinner(currentPlayer, currentOpponent) {\n  if (currentOpponent.board.allSunk()) {\n    winner = currentPlayer;\n    _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayResult(currentPlayer.name, currentOpponent.name, ['winner']);\n    return true;\n  }\n  return false;\n}\n\n// Executes a CPU move\nfunction cpuMove() {\n  setTimeout(() => {\n    const coords = cpu.getRandomCoords();\n    const result = player.receiveAttack(coords[0], coords[1]);\n    if (result[0] === 'sunk') {\n      const shipDiv = document.querySelector(`.player .${result[1]}`);\n      shipDiv.classList.add('sunk');\n    }\n    _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayResult(cpu.name, player.name, result);\n    _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayBoard(player.board.board, player.type, true);\n    const winResult = checkWinner(cpu, player);\n    if (!winResult) {\n      document.querySelector('.player-instruction').innerText = 'Make your move!';\n    }\n    document.querySelector(\"body\").style[\"pointer-events\"] = \"all\";\n  }, 1000);\n}\n\n// Executes a player move\nfunction playerMove(x, y) {\n  if (!winner) {\n    if (player.sendAttack(x, y)) {\n      const result = cpu.receiveAttack(x, y);\n      if (result[0] === 'sunk') {\n        const shipDiv = document.querySelector(`.cpu .${result[1]}`);\n        shipDiv.classList.remove('placed');\n        shipDiv.classList.add('sunk');\n      }\n      _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayResult(player.name, cpu.name, result);\n      _modules_displayBoard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].displayBoard(cpu.board.board, cpu.type, true);\n      if (!checkWinner(player, cpu)) {\n        spaces = document.getElementsByClassName('space');\n        document.querySelector('.player-instruction').innerText = 'CPU is making move...';\n        document.querySelector(\"body\").style[\"pointer-events\"] = \"none\";\n        cpuMove();\n        domAttack();\n      }\n    }\n  }\n}\n\n// Controls what happens when New Game button is selected\nstartButton.addEventListener('click', () => {\n  if (startButton.innerText === 'New Game') {\n    init();\n  }\n\n  if (startButton.innerText === 'Begin!' && player.board.ships.length === 5) {\n    directionDiv.style.display = 'none';\n    document.querySelector(\"#manual-message\").style.color = \"white\";\n    document.querySelector(\"#direction-line\").style.color = \"white\";\n    document.querySelector(\"#direction-btn\").disabled = false;\n    document.querySelector(\".results-container\").style.display = \"flex\";\n    domAttack();\n    startButton.innerText = 'New Game';\n    startButton.disabled = false;\n    randomBtn.style.visibility = 'hidden';\n    document.querySelectorAll(\".cpu .space\").forEach(space => { space.classList.add(\"cpu-active-space\") });\n    document.querySelector('.player-instruction').innerText = 'Make your move!';\n    for (let i = 0; i < htmlShips.length; i++) {\n      if (htmlShips[i].classList.contains(\"placed\")) {\n        htmlShips[i].classList.remove(\"placed\");\n      }\n    }\n  }\n});\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ }),

/***/ "./src/modules/displayBoard.js":
/*!*************************************!*\
  !*** ./src/modules/displayBoard.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst playerDiv = document.querySelector('.player-board');\nconst cpuDiv = document.querySelector('.cpu-board');\nconst resultDiv = document.querySelector('.results');\nconst playerShips = document.querySelector('.player .ships');\nconst allShips = document.querySelectorAll('.ships');\nconst instructions = document.querySelector('.player-instruction');\nconst randomBtn = document.getElementById('random-board');\n\nconst Display = {\n  // Generates HTML board\n  displayBoard(playerBoard, playerType, gameActive) {\n    if (playerType === 'human') {\n      playerDiv.innerHTML = '';\n\n      for (let i = 0; i < playerBoard.length; i += 1) {\n        const space = document.createElement('div');\n        space.className = 'space';\n        space.setAttribute('x', playerBoard[i].x);\n        space.setAttribute('y', playerBoard[i].y);\n        space.setAttribute('occupiedBy', playerBoard[i].occupiedBy);\n        space.setAttribute('empty', playerBoard[i].empty);\n        if (playerBoard[i].hitStatus === 'hit') {\n          space.setAttribute('hitstatus', 'hit');\n          const dot = document.createElement('span');\n          dot.classList.add('hit-dot')\n          space.appendChild(dot);\n        } else if (space.getAttribute(\"occupiedby\") !== \"null\" && space.getAttribute(\"occupiedby\") !== 'missed') {\n          const shipDot = document.createElement('span');\n          shipDot.classList.add('player-ship-dot')\n          space.appendChild(shipDot);\n        }\n        playerDiv.appendChild(space);\n      }\n    } else if (playerType === 'cpu') {\n      cpuDiv.innerHTML = '';\n\n      for (let i = 0; i < playerBoard.length; i += 1) {\n        const space = document.createElement('div');\n        space.className = 'space';\n        space.setAttribute('x', playerBoard[i].x);\n        space.setAttribute('y', playerBoard[i].y);\n\n        if (playerBoard[i].occupiedBy === 'missed') {\n          space.setAttribute('occupiedBy', 'missed');\n        }\n\n        if (playerBoard[i].hitStatus === 'hit') {\n          space.setAttribute('hitStatus', 'hit');\n          const dot = document.createElement('span');\n          dot.classList.add('hit-dot')\n          space.appendChild(dot);\n        }\n        space.setAttribute('empty', null);\n        if (gameActive) { space.classList.add(\"cpu-active-space\") };\n        cpuDiv.appendChild(space);\n      }\n    }\n  },\n  // Displays HTML results\n  displayResult(player, opponent, result) {\n    switch (result[0]) {\n      case 'missed':\n        resultDiv.innerHTML += `${player} attacks ${opponent} and misses.<br>`;\n        break;\n      case 'hit':\n        resultDiv.innerHTML += `${player} attacks and hits ${opponent}'s ${result[1]}.<br>`;\n        break;\n      case 'sunk':\n        resultDiv.innerHTML += `${player} attacks and sinks ${opponent}'s ${result[1]}!<br>`;\n        break;\n      case 'winner':\n        const cpuSpaces = document.querySelectorAll(\".cpu .space\");\n        cpuSpaces.forEach(space => { space.classList.remove(\"cpu-active-space\") });\n        resultDiv.innerHTML += `${player} sinks ${opponent}'s fleet and wins!`;\n        if (player === 'Player') {\n          document.querySelector('.player-instruction').innerText = 'You win!';\n        } else {\n          document.querySelector('.player-instruction').innerText = 'You lose!';\n        }\n        break;\n      default:\n        break;\n    }\n  },\n  // Clears HTML results\n  clearResults() {\n    resultDiv.innerHTML = '';\n\n    for (let i = 0; i < allShips.length; i += 1) {\n      for (let j = 0; j < allShips[i].children.length; j += 1) {\n        if (allShips[i].children[j].classList.contains('select')) {\n          allShips[i].children[j].classList.remove('select');\n        }\n        if (allShips[i].children[j].classList.contains('placed')) {\n          allShips[i].children[j].classList.remove('placed');\n        }\n        if (allShips[i].children[j].classList.contains('sunk')) {\n          allShips[i].children[j].classList.remove('sunk');\n        }\n      }\n    }\n\n    const sheet = document.styleSheets[0];\n\n    for (let i = 0; i < sheet.cssRules.length; i += 1) {\n      if (sheet.cssRules[i].selectorText === '.cpu .space') {\n        sheet.deleteRule(i--);\n      }\n    }\n  },\n  // Highlights selected ship\n  shipHighlight(shipName, highlight) {\n    if (shipName === 'all') {\n      for (let i = 0; i < playerShips.children.length; i += 1) {\n        playerShips.children[i].classList.add('placed');\n      }\n      return;\n    }\n\n    const selectedShip = document.querySelector('.player .' + shipName);\n\n    if (highlight === 'select') {\n      for (let i = 0; i < playerShips.children.length; i += 1) {\n        if (playerShips.children[i].classList.contains('select')) {\n          playerShips.children[i].classList.remove('select');\n        }\n      }\n      if (!selectedShip.classList.contains('placed') && shipName !== 'all') {\n        selectedShip.classList.add('select');\n      }\n    } else if (highlight === 'placed') {\n      if (selectedShip.classList.contains('select')) {\n        selectedShip.classList.remove('select');\n      }\n      selectedShip.classList.add('placed');\n    }\n  },\n  // Displays message when a new game is started\n  newGameMessage() {\n    instructions.innerText = 'Please position your fleet on your board.';\n    document.querySelector('.message').style.visibility = 'visible';\n    randomBtn.style.visibility = 'visible';\n  },\n  // Highlights spaces that are hovered over\n  showHover(validity, coords) {\n    for (let i = 0; i < coords.length; i += 1) {\n      for (let j = 0; j < playerDiv.children.length; j += 1) {\n        const divX = parseInt(playerDiv.children[j].getAttribute('x'), 10);\n        const divY = parseInt(playerDiv.children[j].getAttribute('y'), 10);\n        if (coords[i][0] === divX && coords[i][1] === divY) {\n          if (validity) {\n            playerDiv.children[j].classList.add('hoverValid');\n          } else {\n            playerDiv.children[j].classList.add('hoverInvalid');\n          }\n        }\n      }\n    }\n  },\n  // Removes highlight from hovered over spaces\n  hideHover() {\n    for (let i = 0; i < playerDiv.children.length; i += 1) {\n      if (playerDiv.children[i].classList.contains('hoverValid')) {\n        playerDiv.children[i].classList.remove('hoverValid');\n      }\n      if (playerDiv.children[i].classList.contains('hoverInvalid')) {\n        playerDiv.children[i].classList.remove('hoverInvalid');\n      }\n    }\n  },\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Display);\n\n\n//# sourceURL=webpack://battleship/./src/modules/displayBoard.js?");

/***/ }),

/***/ "./src/modules/gameboard.js":
/*!**********************************!*\
  !*** ./src/modules/gameboard.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ship_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ship.js */ \"./src/modules/ship.js\");\n\n\nconst Gameboard = (boardOwner) => {\n  const owner = boardOwner;\n  const board = [];\n  const ships = [];\n  const missedShots = [];\n\n  function createBoard() {\n    for (let i = 9; i >= 0; i -= 1) {\n      for (let j = 0; j < 10; j += 1) {\n        board.push({\n          x: j,\n          y: i,\n          empty: true,\n          occupiedBy: null,\n          hitStatus: null,\n        });\n      }\n    }\n  }\n\n  createBoard();\n\n  // Retrieves space on board\n  const getSpace = (xCoord, yCoord) => {\n    for (let i = 0; i < board.length; i += 1) {\n      if (board[i].x === xCoord && board[i].y === yCoord) {\n        return board[i];\n      }\n    }\n    return false;\n  };\n\n  // Retrieves ship object from fleet\n  const getShip = (shipName) => {\n    for (let i = 0; i < ships.length; i += 1) {\n      if (ships[i].name === shipName) {\n        return ships[i];\n      }\n    }\n    return false;\n  };\n\n  // Places ship on board\n  const placeShip = (ship) => {\n    for (let i = 0; i < ship.coords.length; i += 1) {\n      const x = ship.coords[i][0];\n      const y = ship.coords[i][1];\n      getSpace(x, y).empty = false;\n      getSpace(x, y).occupiedBy = ship.name;\n    }\n    ships.push(ship);\n  };\n\n  // Receives an attack and adjusts board accordingly\n  const receiveAttack = (xCoord, yCoord) => {\n    if (getSpace(xCoord, yCoord).empty) {\n      getSpace(xCoord, yCoord).occupiedBy = 'missed';\n      getSpace(xCoord, yCoord).empty = false;\n      missedShots.push([xCoord, yCoord]);\n      return ['missed'];\n    }\n\n    if (\n      !getSpace(xCoord, yCoord).empty &&\n      getSpace(xCoord, yCoord).occupiedBy !== 'missed'\n    ) {\n      const hitShip = getSpace(xCoord, yCoord).occupiedBy;\n      getShip(hitShip).hit([xCoord, yCoord]);\n      getSpace(xCoord, yCoord).hitStatus = 'hit';\n      const hitArr = ['hit', hitShip];\n\n      if (getShip(hitShip).isSunk()) {\n        getShip(hitShip).sunk = true;\n        hitArr[0] = 'sunk';\n      }\n\n      return hitArr;\n    }\n  };\n\n  // Checks if fleet has been sunk\n  const allSunk = () => {\n    if (\n      ships[0].sunk &&\n      ships[1].sunk &&\n      ships[2].sunk &&\n      ships[3].sunk &&\n      ships[4].sunk\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  // Generates a random coordinate\n  function randomStartingCoords() {\n    let startingCoords = null;\n\n    for (let i = 0; i < board.length; i += 1) {\n      let startX = Math.floor(Math.random() * 10);\n      let startY = Math.floor(Math.random() * 10);\n      if (getSpace(startX, startY).empty) {\n        startingCoords = [startX, startY];\n        break;\n      } else {\n        startX = Math.floor(Math.random() * 10);\n        startY = Math.floor(Math.random() * 10);\n      }\n    }\n\n    return startingCoords;\n  }\n\n  // Generates a set of random coordinates\n  function randomTotalCoords(startingCoords, shipLength) {\n    const potentialArray = [];\n    const x = startingCoords[0];\n    const y = startingCoords[1];\n\n    // x+\n    if (\n      getSpace(x, y).empty &&\n      getSpace(x + 1, y).empty &&\n      getSpace(x + 2, y).empty &&\n      getSpace(x + 3, y).empty &&\n      getSpace(x + 4, y).empty\n    ) {\n      const placeholderArray = [];\n      placeholderArray.push([x, y]);\n      placeholderArray.push([x + 1, y]);\n      placeholderArray.push([x + 2, y]);\n      placeholderArray.push([x + 3, y]);\n      placeholderArray.push([x + 4, y]);\n      potentialArray.push(placeholderArray);\n    }\n\n    // x-\n    if (\n      getSpace(x, y).empty &&\n      getSpace(x - 1, y).empty &&\n      getSpace(x - 2, y).empty &&\n      getSpace(x - 3, y).empty &&\n      getSpace(x - 4, y).empty\n    ) {\n      const placeholderArray = [];\n      placeholderArray.push([x, y]);\n      placeholderArray.push([x - 1, y]);\n      placeholderArray.push([x - 2, y]);\n      placeholderArray.push([x - 3, y]);\n      placeholderArray.push([x - 4, y]);\n      potentialArray.push(placeholderArray);\n    }\n\n    // y+\n    if (\n      getSpace(x, y).empty &&\n      getSpace(x, y + 1).empty &&\n      getSpace(x, y + 2).empty &&\n      getSpace(x, y + 3).empty &&\n      getSpace(x, y + 4).empty\n    ) {\n      const placeholderArray = [];\n      placeholderArray.push([x, y]);\n      placeholderArray.push([x, y + 1]);\n      placeholderArray.push([x, y + 2]);\n      placeholderArray.push([x, y + 3]);\n      placeholderArray.push([x, y + 4]);\n      potentialArray.push(placeholderArray);\n    }\n\n    // y-\n    if (\n      getSpace(x, y).empty &&\n      getSpace(x, y - 1).empty &&\n      getSpace(x, y - 2).empty &&\n      getSpace(x, y - 3).empty &&\n      getSpace(x, y - 4).empty\n    ) {\n      const placeholderArray = [];\n      placeholderArray.push([x, y]);\n      placeholderArray.push([x, y - 1]);\n      placeholderArray.push([x, y - 2]);\n      placeholderArray.push([x, y - 3]);\n      placeholderArray.push([x, y - 4]);\n      potentialArray.push(placeholderArray);\n    }\n\n    // Returns one random set of coords\n    let slicedArr =\n      potentialArray[Math.floor(Math.random() * potentialArray.length)];\n\n    // Run the function again if no coordinates work\n    if (slicedArr) {\n      slicedArr = slicedArr.slice(0, shipLength);\n    } else {\n      const errorCoords = randomStartingCoords();\n      return randomTotalCoords(errorCoords, shipLength);\n    }\n\n    return slicedArr;\n  }\n\n  // Removes nonexistent spaces from a coordinate array\n  const removeFalseSpaces = (coordArray) => {\n    const newArray = [];\n\n    for (let i = 0; i < coordArray.length; i += 1) {\n      if (\n        coordArray[i][0] >= 0 &&\n        coordArray[i][0] <= 9 &&\n        coordArray[i][1] >= 0 &&\n        coordArray[i][1] <= 9\n      ) {\n        newArray.push([coordArray[i][0], coordArray[i][1]]);\n      }\n    }\n    return newArray;\n  };\n\n  // Place ships manually based on space selection\n  const manuallyPlaceShip = (shipName, coords, direction, hover = false) => {\n    let length = null;\n    const totalCoords = [coords];\n    const name = shipName.charAt(0).toLowerCase() + shipName.slice(1);\n\n    switch (name) {\n      case 'carrier':\n        length = 5;\n        break;\n      case 'battleship':\n        length = 4;\n        break;\n      case 'destroyer':\n        length = 3;\n        break;\n      case 'submarine':\n        length = 3;\n        break;\n      case 'patrol':\n        length = 2;\n        break;\n      default:\n    }\n\n    if (direction === 'vertical') {\n      let startingY = coords[1];\n      for (let i = 1; i < length; i += 1) {\n        totalCoords.push([coords[0], startingY - 1]);\n        startingY -= 1;\n      }\n    } else {\n      let startingX = coords[0];\n      for (let i = 1; i < length; i += 1) {\n        totalCoords.push([startingX + 1, coords[1]]);\n        startingX += 1;\n      }\n    }\n\n    for (let i = 0; i < totalCoords.length; i += 1) {\n      const x = totalCoords[i][0];\n      const y = totalCoords[i][1];\n\n      if (!getSpace(x, y).empty) {\n        return [false, removeFalseSpaces(totalCoords)];\n        // return false;\n      }\n    }\n\n    for (let i = 0; i < ships.length; i += 1) {\n      if (ships[i].name === name) {\n        return false;\n      }\n    }\n\n    if (!hover) {\n      const ship = (0,_ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(name, totalCoords, length);\n      placeShip(ship);\n      return true;\n    }\n\n    return [true, totalCoords];\n  };\n\n  // Randomly generates and places a fleet on board\n  const generateFleet = () => {\n    while (board.length) {\n      board.pop();\n    }\n    while (ships.length) {\n      ships.pop();\n    }\n\n    createBoard();\n\n    const carrierStart = randomStartingCoords();\n    const carrierCoords = randomTotalCoords(carrierStart, 5);\n    const carrier = (0,_ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('carrier', carrierCoords, 5);\n    placeShip(carrier);\n\n    const battleshipStart = randomStartingCoords();\n    const battleshipCoords = randomTotalCoords(battleshipStart, 4);\n    const battleship = (0,_ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('battleship', battleshipCoords, 4);\n    placeShip(battleship);\n\n    const destroyerStart = randomStartingCoords();\n    const destroyerCoords = randomTotalCoords(destroyerStart, 3);\n    const destroyer = (0,_ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('destroyer', destroyerCoords, 3);\n    placeShip(destroyer);\n\n    const submarineStart = randomStartingCoords();\n    const submarineCoords = randomTotalCoords(submarineStart, 3);\n    const submarine = (0,_ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('submarine', submarineCoords, 3);\n    placeShip(submarine);\n\n    const patrolStart = randomStartingCoords();\n    const patrolCoords = randomTotalCoords(patrolStart, 2);\n    const patrol = (0,_ship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('patrol', patrolCoords, 2);\n    placeShip(patrol);\n  };\n\n  return {\n    owner,\n    board,\n    getSpace,\n    generateFleet,\n    receiveAttack,\n    manuallyPlaceShip,\n    ships,\n    allSunk,\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Gameboard);\n\n\n//# sourceURL=webpack://battleship/./src/modules/gameboard.js?");

/***/ }),

/***/ "./src/modules/player.js":
/*!*******************************!*\
  !*** ./src/modules/player.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _gameboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboard.js */ \"./src/modules/gameboard.js\");\n\n\nconst Player = (playerName, playerType) => {\n  const name = playerName;\n  const type = playerType;\n  const board = (0,_gameboard_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(name);\n  const sentAttacks = [];\n\n  // Receives attack coordinates to send to board\n  function receiveAttack(xCoord, yCoord) {\n    return board.receiveAttack(xCoord, yCoord);\n  }\n\n  // Adds requested attack to array if valid\n  function sendAttack(x, y) {\n    // If space has already been selected, return false\n    for (let i = 0; i < sentAttacks.length; i += 1) {\n      if (sentAttacks[i][0] === x && sentAttacks[i][1] === y) {\n        return false;\n      }\n    }\n\n    sentAttacks.push([x, y]);\n    return true;\n  }\n\n  // Returns random coordinates to attack\n  function getRandomCoords() {\n    let randomCoords = null;\n\n    // Makes sure random coordinates are valid\n    function verifyNotAttacked(x, y) {\n      let verify = true;\n\n      for (let i = 0; i < sentAttacks.length; i += 1) {\n        if (sentAttacks[i][0] === x && sentAttacks[i][1] === y) {\n          verify = false;\n        }\n      }\n\n      return verify;\n    }\n\n    for (let i = 0; i < 100; i += 1) {\n      let x = Math.floor(Math.random() * 10);\n      let y = Math.floor(Math.random() * 10);\n      if (verifyNotAttacked(x, y)) {\n        randomCoords = [x, y];\n        sentAttacks.push(randomCoords);\n        break;\n      } else {\n        x = Math.floor(Math.random() * 10);\n        y = Math.floor(Math.random() * 10);\n      }\n    }\n\n    return randomCoords;\n  }\n\n  return {\n    name,\n    type,\n    board,\n    receiveAttack,\n    getRandomCoords,\n    sentAttacks,\n    sendAttack,\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);\n\n\n//# sourceURL=webpack://battleship/./src/modules/player.js?");

/***/ }),

/***/ "./src/modules/ship.js":
/*!*****************************!*\
  !*** ./src/modules/ship.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst Ship = (shipName, shipCoords, shipLength) => {\n  const name = shipName;\n  const coords = shipCoords;\n  const length = shipLength;\n  const hitArray = [];\n  const sunk = false;\n\n  const hit = (hitCoords) => {\n    for (let i = 0; i < hitArray.length; i += 1) {\n      if (hitArray[i][0] === hitCoords[0] && hitArray[i][1] === hitCoords[1]) {\n        return false;\n      }\n    }\n    return hitArray.push(hitCoords);\n  };\n\n  const isSunk = () => {\n    if (hitArray.length === length) {\n      return true;\n    }\n    return false;\n  };\n\n  return { name, coords, length, hitArray, sunk, hit, isSunk };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ship);\n\n\n//# sourceURL=webpack://battleship/./src/modules/ship.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;